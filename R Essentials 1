We want users to be able to begin in an interactive environment, 
where they did not consiencely think of themselves as programming.
Then as their needs become clearer and their sophistication increased,
they should be able to slide gradually into programming,
when the language and system aspects would become more important.

Drawbacks:
There is little support for dynamic / 3D graphics

One of the big advantages of working with R is the ability to use libraries developed by users. 
The base R comes with the following preloaded set of libraries:
getOption("defaultPackages")  #base packages 

install.packages("BeyesCR") 
install.packages("BeyesCR", depends=TRUE)

library() #installed packages

Working directories
getwd() #default saving folderr

setwd("C:/Users/Curwan/Documents/") #set set to other directory
setwd("H:Documents/")

data = read.table(file="clipboard", header="TRUE") #Import excel file

q() #Quit session
CTR L #Clear All

x=10 #Use "=" or "<-" to assign/create object
x or print(x) #print output

objects() #Prints list of all the objects created in session
ls() #Prints list of all the objects created in session
rm(x) #Remove objects from workspace
character(0)

options(digets = 16) #Increase number of decimals

xx <- 1:10 #Create a series of 10 integers from 1 to 10.
yy <- rnorm(10) #Simulate 10 random observations from a standard normal distribution
plot(xx,yy) #Produce scatter plot

**NB HELP function using ? preceding the function
?getwd


Data Types in R - Different Objects:
Character, Numeric (Real), Integer, Complex Number, Logical (TRUE or FALSE)
Most basic Objects:
Vector - only contains objects of same class
List - vector with different class objects

attributes() #each object has attributes: Names (Dimnames), Dimensions, Class, Length
Inf - 1/0 special number to infinity
NaN - undefined number

vector() #create empty vector
x = vector("numeric", length = 10) #create vector
c() #concatenate function to create vectors
x = c(0.5, 0.6) #Numeric
x = c(TRUE, FALSE) or x = c(T,F) #Logical
x = c("a", "b", "c") #Character
x = c(1+0i, 2+4i) #Complex

If you create a vector and mix objects of different classes it will result in COERCION.
Implicit Coercion force the vector to take class of most number of entries.
x = c(1,"a") #Character
x = c(2, TRUE) #Numeric, since T & F are binary
x = c("a", TRUE) #Character

Explicit Coercion, you specify the object class:
x = 0:6
class(x) #print class of object x
as.numeric(x) #change class to numeric
as.logical(x) #
as.character(x)

x = c("a", "b", "c") #Explicit coercion is not always possible
as.numeric(x) #Resulting NA introduced by coercion
as.logical(x) #Cant change Strings as Factors


MATRICES are vectors that have a dimension attribute
m = matrix(nrow=2, ncol=3) #create empty matrix with 2 rows and 3 columns
dim(m)
attributes(m)

m = matrix(1:6, nrow=2, ncol=3) #Construct matrix column-wise (add numbers to each col first)

m = 1:10
dim(m) = c(2,5) #Take vector and add dimension attribute to create matrix

x = 1:3
y = 10:12
cbind(x,y) #Bind seperate columns to create matrix
rbind(x,y) #Bind seperate rows to create matrix

LISTS are special vectores with elements of different classes
x = list(1, TRUE, "a", 1+4i) #create list 

FACTORS are special vectors for Chategorical Data. Can be ordered or unordered and boolian.
x = factor(c("a", "b", "b", "a", "a", "b", "b")) #create factor
table(x) #create table of summed entries
unclass(x) #1-hot-encoding of characters

LEVELS argument in factor() function to order levels:
x = factor(c("A", "D", "N", "N", "A", "A", "A", "N", "D", "D"), levels = c("D", "N", "A"))
attr(x, "levels") #print sum of different categorical entries

MISSING VALUES NaN>>NA
is.NA() - test if input is missing value, can have class
is.NaN() - test if input is not a number (undefined)

DATA FRAME stores tabular data
Special type of list, each element (column) with same length (number of rows)
read.table() / read.csv() #create Data Frame, import data
x = data.frame(foo = 1:4, bar = c(T, F, T, T))
DF's are matrices that can store different classes of objects
data.matrix() #Convert DF to matrix
row.names #attribute
nrow(x) #number of rows
ncol(x) #number of columns

NAMES for objects and elements in R
x = 1:3
names(x) #NULL names, only integers
names(x) = c("To", "be", "or not to be") #assign names to integers, printed: To 1 be 2 or not to be 3
x = list(a=1, b=2, c=3) #lists can have names
names(x) #Note how they are printed: $a 1 $b 2 $c 3
m = matrix(1:4, nrow=2, ncol=2) #create matrix
dimnames(m) = list(c("a", "b"), c("c", "d")) #add dimention names, NB note deconstucted order

SUBSETS and Referencing elements within objects
[] >> Returns Subset of same type as original object
[[]] >> Extracts Single element of list or DF
$ >> Extracts elements by Name
! #
x = c("a", "b", "c", "d", "e", "f")
x[1] #Returns "a", 1st object in x
x[2] #Returns "b", 2nd object
x[1:4] #Returns "a", "b", "c", "d"
x[x>"a"] #Returns "b", "c", "d", "e", "f", objects larger than "a"
u = x>"a" #Create new function u that Returns logical T & F for objects in x
x[u] #same result as x[x>"a"]

m = matrix(1:6, nrow=2, ncol=3) #Subset Matrices using row & col numbers
m[1,2] #Returns 3, row 1 column 2 entry (as vector/integer)
m[1,] #Returns 1 3 5, all entries of row 1 (as vector)
m[,2] #Returns 2 4, all entries of column 2 (as vector)
m[1,2, drop=FALSE] #Returns 3, row 1 column 2 entry (as matrix)
m[1, , drop=FALSE] #Returns 1 3 5, all entries of row 1 (as matrix)

x = list(to=1:4, be=0.6) #Subest Lists with $ or [[]]
x[1] #Returns $to 1 2 3 4 (as list)
x[[1]] / x[["to"]] / x$to #Returns 1 2 3 4 (as integer)
x = list(a=1:4, b=0.6, c="hello") #Use single brackets [] to extract multiple elements
x[c(1,3)] #Extract 1st & 3rd elements

BASIC ARITHMETIC
2+3 #addition & subtraction
4*5 #multiplication
6/7 #division
5^6 #exponents
sqrt(2) #square root
exp(1) #Euler's constant
Pi #pi
options(digits=10)

READING (IMPORTING) DATA
read.table() #tabular data
read.csv() #tabular data
readLines #reading lines of a text file
source #reading R scripts > oposite of dump
dget #reading R code file (scripts) > oposite of dput
load #loading saved workspaces

read.tabel Arguments:
file #name of file
header #logical, Yes if theres a header line
sep #how columns are seperated (delimiter) i.e. sep="," sep=';' sep='\t'
colClasses #character vector with classes of each column
nrows #number of rows (excluding header)
comment.char #character string of comment character
skip # number of lines to skip from beginning
stringsAsFactors #should character variables be coded as factors?

IMPORTING DATASETS
getwd() #current file directory
setwd("C/Users/Documents") #change directory
READ TEXT FILE
data <- read.tabel("DataReading.txt") #read text file into R
READ CSV FILE
data <- rad.csv("DataReading.csv") #read csv file into R *ND comma as defeult delimiter
READ EXCEL FILE
1. Save Excel as .txt > Use read.tabel()
2. Save Excel as .csv > Use read.csv()
3. Select data on Excel file > Copy to clipboard >
data <- read.tabel("clipboard") #import copied data from Excel sheet

>>> R assigns column classes by default or scanning through all columns.
**Quick method to specify all classes
initial = read.tabel("Data.txt, nrows=2) #only read few observations *NB nrow=2 not includeing headers
classes = sapply(initial, class) #loops class function through variables to reated class vector names classes
print(classes) #saved class of each column
data = read.tabel("Data.txt", colClasses=classes) #set class of whole dataset to classes vector

REMOVE MISSING DATA MANUALLY
stopifnot(complete.cases(data$Col2) != is.na(data$Col2)) #is.na missing values in column 2
ok = complete.cases(data$Col2)
sum(!ok) #how many observations are not ok?

CONTROL STRUCTURES
if #test condition
else #test condition
for #loops code for fixed number of times
while #execute code while certain condition is true
repeat #infinite loop
break #break execution of a loop
next #skip an interation of a loop
return #exit function

IF/ELSE hierarchy of conditions
if(<condition1>) {
    ##Do something if condition1 is true
} else if(<condition2>){
    ##Do something else if condition2 is true
} else {
    ##Do something if both conditions are false
}

FOR loop > print x in 3 different ways
x = c("a","b","c","d")
1.for(i in 1:4) {
    print(x[i])
}
2.for(i in seq_along(x))  {
    print(x[i])
}
3.for(i in 1:4) print(x[i])

for(i in 1:10) {print(i)} #print 1-10

x=matrix(1:6,2,3) #Nested Loop
for (i in seq_len(nrow(x))) {
    for (j in seq_len(col(x))) {
        print(x[i,j])
    }
}

WHILE with more than one condition
z  <- 5
while(z>=3 && z<=10) {
    print(z)
    coin <- rbinom(1,1,0.5) #result from coin toss
    if(coin==1){
        z <- z+1
    } else {
        z <- z-1}}
